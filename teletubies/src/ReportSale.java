
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import teletubies.database.DatabaseHandler;
import teletubies.model.MenuDB;
import teletubies.model.ReportSellDaliy;
import teletubies.model.SaleOrderDB;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author Hall_PC
 */
public class ReportSale extends javax.swing.JPanel {

    /**
     * Creates new form ReportEmpPanel
     */
    public ReportSale() {
        initComponents();
        reportGen();
        //showAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cookingTableScrollPane = new javax.swing.JScrollPane();
        reportSaleTable = new javax.swing.JTable();
        reportSaleTitleLabel = new javax.swing.JLabel();
        printReportSaleButton = new javax.swing.JButton();
        searchBar = new javax.swing.JTextField();
        sumValue = new javax.swing.JLabel();
        sumLabel = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1280, 720));
        setLayout(null);

        reportSaleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order ID", "Emp ID", "FoodName", "Price", "Quatity", "totalPrice", "Sale TimeStamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reportSaleTable.setAlignmentX(-10.0F);
        reportSaleTable.setGridColor(new java.awt.Color(0, 102, 255));
        reportSaleTable.setRowHeight(40);
        reportSaleTable.setRowMargin(5);
        cookingTableScrollPane.setViewportView(reportSaleTable);

        add(cookingTableScrollPane);
        cookingTableScrollPane.setBounds(40, 110, 1180, 520);

        reportSaleTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        reportSaleTitleLabel.setText("Report Sale");
        add(reportSaleTitleLabel);
        reportSaleTitleLabel.setBounds(500, 20, 270, 80);

        printReportSaleButton.setBackground(new java.awt.Color(204, 204, 204));
        printReportSaleButton.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        printReportSaleButton.setText("Print");
        printReportSaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReportSaleButtonActionPerformed(evt);
            }
        });
        add(printReportSaleButton);
        printReportSaleButton.setBounds(1050, 40, 170, 50);

        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBarKeyReleased(evt);
            }
        });
        add(searchBar);
        searchBar.setBounds(50, 70, 290, 30);

        sumValue.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        sumValue.setText("0.0 Bath");
        add(sumValue);
        sumValue.setBounds(230, 630, 220, 40);

        sumLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        sumLabel.setText("Total Sale :");
        add(sumLabel);
        sumLabel.setBounds(40, 630, 190, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void printReportSaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReportSaleButtonActionPerformed
        String path = "./Report";
        
        Date date = new Date();
        SimpleDateFormat reportformat= new SimpleDateFormat("dd/MM/yyyy hh:mm:ss aa",Locale.ENGLISH);
        SimpleDateFormat format= new SimpleDateFormat("yyyy_MM_dd_hh_mm_ss ",Locale.ENGLISH);
        
        String filepath = path + "/"+"ReportSale"+format.format(date) + ".pdf";
        
        String dochead = "Report Sale (" + reportformat.format(date) + ")";
        String sum = sumValue.getText();
        
        Document doc = new Document();
        
        try{
            PdfWriter.getInstance(doc, new FileOutputStream(filepath) );
            doc.open();
            
            Paragraph head = new Paragraph(dochead,FontFactory.getFont(FontFactory.TIMES_ROMAN,30, Font.BOLD, BaseColor.BLACK));
            head.setAlignment(Paragraph.ALIGN_CENTER);
            doc.add(head);
            
            doc.add(new Paragraph("\n"));
            
            Paragraph s = new Paragraph("Total Sale : " + sum);
            s.setAlignment(Paragraph.ALIGN_CENTER);
            doc.add(s);
            
            doc.add(new Paragraph("\n"));
            
            PdfPTable tbl = new PdfPTable(7);
            
            //add header
            tbl.addCell("Order ID");
            tbl.addCell("EmployeeID");
            tbl.addCell("Food Name");
            tbl.addCell("Price");
            tbl.addCell("Quantity");
            tbl.addCell("Total Price");
            tbl.addCell("Sale Timestamp");
            
            for(int i = 0 ; i < reportSaleTable.getRowCount() ; i++){
                String orderid = reportSaleTable.getValueAt(i,0).toString();
                String empid = reportSaleTable.getValueAt(i,1).toString();
                String foodname = reportSaleTable.getValueAt(i,2).toString();
                String price = reportSaleTable.getValueAt(i,3).toString();
                String quantity = reportSaleTable.getValueAt(i,4).toString();
                String totalprice = reportSaleTable.getValueAt(i,5).toString();
                String saletimestamp = reportSaleTable.getValueAt(i,6).toString();
                
                tbl.addCell(orderid);
                tbl.addCell(empid);
                tbl.addCell(foodname);
                tbl.addCell(price);
                tbl.addCell(quantity);
                tbl.addCell(totalprice);
                tbl.addCell(saletimestamp);
                
            }           
            doc.add(tbl);
            JOptionPane.showMessageDialog(null , "Print Report Sale Success" , "ALERT MESSAGE" , JOptionPane.INFORMATION_MESSAGE);

        }
        catch (FileNotFoundException ex) {
            Logger.getLogger(ReportSale.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch(DocumentException ex){
            Logger.getLogger(ReportSale.class.getName()).log(Level.SEVERE, null, ex);
        }
        doc.close();
        
        openReport(filepath);
    }//GEN-LAST:event_printReportSaleButtonActionPerformed
    
    public void openReport(String path){
        try{
            File file = new File(path);
            if(file.exists()){
                if(Desktop.isDesktopSupported()){
                    Desktop.getDesktop().open(file);
                }
                else{
                    JOptionPane.showMessageDialog(null , "Not Supported" , "ALERT MESSAGE" , JOptionPane.ERROR_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(null , "No Bill Exist" , "ALERT MESSAGE" , JOptionPane.ERROR_MESSAGE);
            }
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    private void searchBarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyReleased
        String search = searchBar.getText();
        DefaultTableModel empModel = (DefaultTableModel) reportSaleTable.getModel();
        empModel.setNumRows(0);
        if(!search.equals("") ){
            try {
                ArrayList<ReportSellDaliy> ReportOrderDBs = DatabaseHandler.findReportByOrderId(new DatabaseHandler(), Integer.parseInt(search));
                int length = ReportOrderDBs.size();
                //sum = 0;
                if (length > 0 ) {
                    for (int i = 0; i < length; i++) {
                        empModel.addRow(new Object[]{ReportOrderDBs.get(i).getOrderID(),
                        ReportOrderDBs.get(i).getEmployeeID(),
                        ReportOrderDBs.get(i).getFoodName(),
                        ReportOrderDBs.get(i).getFoodPrice(),
                        ReportOrderDBs.get(i).getQuantity(),
                        ReportOrderDBs.get(i).getTotalPrice(),
                        ReportOrderDBs.get(i).getSaleTimestamp()});

                        //sum += ReportOrderDBs.get(i).getFoodPrice();
                     }
                    //sumValue.setText(String.valueOf(sum)+" Bath");
                }
            } 
            catch (Exception e) {
                System.err.println(e);
                //sumValue.setText("0.0 Bath");
            }
        }
        else if(search.equals("")){
            reportGen();
        }
    }//GEN-LAST:event_searchBarKeyReleased

    //Show report sale on gui
    private void reportGen() {
        try {
            DefaultTableModel dt = (DefaultTableModel) reportSaleTable.getModel();
            List<SaleOrderDB> orderTable = DatabaseHandler.findAllOrder(new DatabaseHandler());
            List<MenuDB> menuTable = DatabaseHandler.findAllMenu(new DatabaseHandler());
            int length = orderTable.size();
            sum = 0;
            if (length > 0) {
                for (int i = 0; i < length; i++) {
                    int foodId = orderTable.get(i).getFoodID() - 1;
                    dt.addRow(new Object[]{orderTable.get(i).getOrderID(),
                    orderTable.get(i).getEmployeeID(),
                    menuTable.get(foodId).getFoodName(),
                    menuTable.get(foodId).getFoodPrice(),
                    orderTable.get(i).getQuantity(),
                    orderTable.get(i).getTotalPrice(),
                    orderTable.get(i).getTimestamp()});
                    sum += menuTable.get(foodId).getFoodPrice();
                }
            }
            sumValue.setText(String.valueOf(sum)+" Bath");
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    private double sum = 0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane cookingTableScrollPane;
    private javax.swing.JButton printReportSaleButton;
    private javax.swing.JTable reportSaleTable;
    private javax.swing.JLabel reportSaleTitleLabel;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel sumLabel;
    private javax.swing.JLabel sumValue;
    // End of variables declaration//GEN-END:variables
}
